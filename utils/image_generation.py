import base64
import io
import json
import logging
import boto3
from PIL import Image
import time
from enum import Enum, unique

from botocore.exceptions import ClientError


class ImageError(Exception):
    """
    Custom exception for errors returned by SDXL 1.0.
    """

    def __init__(self, message):
        self.message = message


# Set up logging for notebook environment
logger = logging.getLogger(__name__)
if logger.hasHandlers():
    logger.handlers.clear()
handler = logging.StreamHandler()
logger.addHandler(handler)
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
handler.setFormatter(formatter)
logger.setLevel(logging.INFO)


def generate_image_from_text(model_id, body):
    """
    Generate an image using SDXL 1.0 on demand.
    Args:
        model_id (str): The model ID to use.
        body (str) : The request body to use.
    Returns:
        image_bytes (bytes): The image generated by the model.
    """

    logger.info("Generating image with SDXL model %s", model_id)

    bedrock = boto3.client(service_name="bedrock-runtime",region_name='us-west-2')

    accept = "application/json"
    content_type = "application/json"

    response = bedrock.invoke_model(
        body=body, modelId=model_id, accept=accept, contentType=content_type
    )
    response_body = json.loads(response.get("body").read())
    logger.info(f"Bedrock result: {response_body['result']}")

    base64_image = response_body.get("artifacts")[0].get("base64")
    base64_bytes = base64_image.encode("ascii")
    image_bytes = base64.b64decode(base64_bytes)

    finish_reason = response_body.get("artifacts")[0].get("finishReason")

    if finish_reason == "ERROR" or finish_reason == "CONTENT_FILTERED":
        raise ImageError(f"Image generation error. Error code is {finish_reason}")

    logger.info("Successfully generated image with the SDXL 1.0 model %s", model_id)

    return image_bytes


def text_to_image(
    model_id,
    positive_prompt,
    negative_prompt,
):
    """
    Entrypoint for SDXL example.
    Args:
        model_id (str): The model ID to use.
        positive_prompt (str): The positive prompt to use.
        negative_prompt (str): The negative prompt to use.
    """

    # Build request body
    body = json.dumps(
        {
            "text_prompts": [
                {"text": positive_prompt, "weight": 1},
                {"text": negative_prompt, "weight": -1},
            ],
            "height": 1024,
            "width": 1024,
            "cfg_scale": 12,
            "clip_guidance_preset": "NONE",
            "sampler": "K_DPMPP_2M",
            "samples": 1,
            "seed": 123456,
            "steps": 25,
            "style_preset": "anime", # anime,fantasy-art
        }
    )

    
    try:
        image_bytes = generate_image_from_text(model_id=model_id, body=body)
        image = Image.open(io.BytesIO(image_bytes))
    except ClientError as err:
        message = err.response["Error"]["Message"]
        logger.error("A client error occurred: %s", message)
    except ImageError as err:
        logger.error(err.message)

    else:
        logger.info(f"Finished generating image with SDXL model {model_id}.")
        
        
def generate_prompt_from_image(source_image, style):
    user_text = f'''I'm using Stable Diffusion XL to generate variant images in different artistic styles. I'll provide an image for you to analyze. Based on that analysis, please generate a detailed text prompt in the {style} style. The prompt should:

    1. Accurately describe the key elements, subjects, and composition of the original image.
    2. Incorporate specific characteristics, techniques, and visual elements associated with the {style} style.
    3. Include relevant details about color palette, lighting, texture, and mood that would be appropriate for the chosen style.
    4. Be formatted in a way that's optimized for Stable Diffusion XL, using any relevant prompt engineering techniques.

    please give me text prompt only and no need any notes and explanation.
    '''
    max_size=1568
    # source_image is a file name
    with open(source_image, "rb") as f:
        image_bytes = f.read()
        img = Image.open(io.BytesIO(image_bytes))
        width, height = img.size
        img_format = img.format.lower()

        if width > max_size or height > max_size:
            if width > height:
                new_width = max_size
                new_height = int(height * (max_size / width))
            else:
                new_height = max_size
                new_width = int(width * (max_size / height))

            img = img.resize((new_width, new_height), Image.LANCZOS)

        resized_bytes = io.BytesIO()
        img.save(resized_bytes, format=img_format)
        resized_bytes = resized_bytes.getvalue()

    bedrock_client = boto3.client(service_name='bedrock-runtime', region_name='us-west-2')
    response = bedrock_client.converse(
        modelId='anthropic.claude-3-5-sonnet-20240620-v1:0',
        messages=[{"role": "user", "content": [{"text": user_text, }, {"image": {"format": img_format, "source": {"bytes": resized_bytes}}}]}],
        inferenceConfig={"temperature": 0.1},
        additionalModelRequestFields={"top_k": 200}
    )

    return response['output']['message']['content'][0]['text']


class ImageToImageRequest:
    """
    Class for handling image to image request parameters.
    """

    def __init__(
        self,
        image_width,
        image_height,
        positive_prompt,
        negative_prompt="low res",
        init_image_mode="IMAGE_STRENGTH",
        image_strength=0.5,
        cfg_scale=7,
        clip_guidance_preset="SLOWER",
        sampler="K_DPMPP_2M",
        samples=1,
        seed=1,
        steps=30,
        style_preset="photographic",
        extras=None,
    ):
        self.image_width = image_width
        self.image_height = image_height
        self.positive_prompt = positive_prompt
        self.negative_prompt = negative_prompt
        self.init_image_mode = init_image_mode
        self.image_strength = image_strength
        self.cfg_scale = cfg_scale
        self.clip_guidance_preset = clip_guidance_preset
        self.sampler = sampler
        self.samples = samples
        self.seed = seed
        self.steps = steps
        self.style_preset = style_preset
        self.extras = extras

def generate_image_from_image(model_id, body):
    """
    Generate an image using SDXL 1.0 on demand.
    Args:
        model_id (str): The model ID to use.
        body (str) : The request body to use.
    Returns:
        image_bytes (bytes): The image generated by the model.
    """

    logger.info("Generating image with SDXL model %s", model_id)

    bedrock = boto3.client(service_name="bedrock-runtime",region_name='us-west-2')

    accept = "application/json"
    content_type = "application/json"

    response = bedrock.invoke_model(
        body=body, modelId=model_id, accept=accept, contentType=content_type
    )
    response_body = json.loads(response.get("body").read())
    logger.info(f"Bedrock result: {response_body['result']}")

    base64_image = response_body.get("artifacts")[0].get("base64")
    base64_bytes = base64_image.encode("ascii")
    image_bytes = base64.b64decode(base64_bytes)

    finish_reason = response_body.get("artifacts")[0].get("finishReason")

    if finish_reason == "ERROR" or finish_reason == "CONTENT_FILTERED":
        raise ImageError(f"Image generation error. Error code is {finish_reason}")

    logger.info("Successfully generated image with the SDXL 1.0 model %s", model_id)

    return image_bytes


def image_variation_sdxl(source_image, style, positive_prompt):
    """
    Entrypoint for SDXL example.
    Args:
        source_image (str): The path to the source image.
        style (str): The style preset to use.
        positive_prompt (str): The positive prompt for image generation.
        negative_prompt (str): The negative prompt for image generation.
    """
    # 创建 ImageToImageRequest 实例
    request = ImageToImageRequest(
        image_width=1024,  # 你可以根据需要调整这些值
        image_height=1024,
        positive_prompt=positive_prompt,
        style_preset=style,
        # 其他参数可以使用默认值，或根据需要进行调整
    )
    MODEL_ID = "stability.stable-diffusion-xl-v1"
    # Read source image from file and encode as base64 strings
    image = Image.open(source_image)
    # save original size to final resize
    o_w, o_h = image.size

    # resize image for image generation
    
    resized_image = image.resize((request.image_width, request.image_height))
    
    buffered = io.BytesIO()
    resized_image.save(buffered, format="PNG")
    init_image = base64.b64encode(buffered.getvalue()).decode("utf-8")

    # 构建请求体
    body = json.dumps({
        "text_prompts": [
            {"text": request.positive_prompt, "weight": 1},
            {"text": request.negative_prompt, "weight": -1},
        ],
        "init_image": init_image,
        "init_image_mode": request.init_image_mode,
        "image_strength": request.image_strength,
        "cfg_scale": request.cfg_scale,
        "clip_guidance_preset": request.clip_guidance_preset,
        "sampler": request.sampler,
        "samples": request.samples,
        "seed": request.seed,
        "steps": request.steps,
        "style_preset": request.style_preset,
    })

    try:
        logger.info(f"Source image: {source_image}")
        image_bytes = generate_image_from_image(model_id=MODEL_ID, body=body)
        image = Image.open(io.BytesIO(image_bytes))
        image = image.resize((o_w, o_h))
        epoch_time = int(time.time())
        return image

    except ClientError as err:
        message = err.response["Error"]["Message"]
        logger.error("A client error occurred: %s", message)
    except ImageError as err:
        logger.error(err.message)

    else:
        logger.info(f"Finished generating image with SDXL model {MODEL_ID}.")
